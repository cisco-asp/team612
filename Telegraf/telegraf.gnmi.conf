[global_tags]
[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"
  precision = ""
  hostname = "cisco"
  omit_hostname = true


[[outputs.http]]
  url = "http://198.18.133.23:8088/services/collector"
  data_format="splunkmetric"
  splunkmetric_hec_routing=true
  [outputs.http.headers]
    Content-Type = "application/json"
    Authorization = "Splunk abcd1234"

#Events data
[[outputs.http]]
#  url = "http://198.18.133.23:8088/services/collector/event"
  url = "http://198.18.133.23:8088/services/collector/raw"
#  url = "https://198.18.133.23:8088/services/collector/raw"
  data_format = "json"
  insecure_skip_verify = true
  use_batch_format = true
  namepass = ["fib-common", "l2vpn"]
  [outputs.http.headers]
  Content-Type = "application/json"
  Authorization = "Splunk de727651-0c86-412a-8b89-49cec2d957a2"
#  X-Splunk-Request-Channel = "de727651-0c86-412a-8b89-49cec2d957a2"

[[outputs.http]]
#  url = "http://198.18.133.23:8088/services/collector/event"
  url = "http://198.18.133.23:8088/services/collector/raw"
#  url = "https://198.18.133.23:8088/services/collector/raw"
  data_format = "json"
  insecure_skip_verify = true
  use_batch_format = true
  namepass = ["te"]
  [outputs.http.headers]
  Content-Type = "application/json"
  Authorization = "Splunk e9e45236-aae2-454a-8a85-e58ddb781746"
#  X-Splunk-Request-Channel = "e9e45236-aae2-454a-8a85-e58ddb781746"

[[outputs.http]]
#  url = "http://198.18.133.23:8088/services/collector/event"
  url = "http://198.18.133.23:8088/services/collector/raw"
#  url = "https://198.18.133.23:8088/services/collector/raw"
  data_format = "json"
  insecure_skip_verify = true
  use_batch_format = true
  namepass = ["sr"]
  [outputs.http.headers]
  Content-Type = "application/json"
  Authorization = "Splunk 6fd68f78-cb06-49ca-81b0-8b380ea291f7"
#  X-Splunk-Request-Channel = "6fd68f78-cb06-49ca-81b0-8b380ea291f7"


[[outputs.file]]
  files = ["stdout", "/tmp/gnmi.out"]
  rotation_max_size = "5MB"
  rotation_max_archives = 3
  data_format = "json"


 [[inputs.gnmi]]
  addresses = ["xr-1:57400","xr-2:57400","xr-5:57400","xr-6:57400","xr-7:57400","xr-8:57400"]

  ## define credentials
  username = "cisco"
  password = "cisco123"

  ## redial in case of failures after
  redial = "10s"

#This is an added subscription to segment routing data plane monitoring

  [[inputs.gnmi.subscription]]
    name = "dpm"
    origin = "Cisco-IOS-XR-mpls-oam-oper"
    path = "mpls-oam/dpm"
    subscription_mode = "sample"
    sample_interval = "30"

[[processors.starlark]]
namepass = ["dpm"]
source = '''
def apply(metric):
    prefix_sid = None

    for field_name, field_value in metric.fields.items():
        if "prefixes/" in field_name and field_name.endswith("pfx_sid"):
            prefix_sid = str(field_value)

    if prefix_sid:
        metric.tags["label_value"] = prefix_sid

    return metric
'''

  [[inputs.gnmi.subscription]]
    name = "fib-common"
    origin = "Cisco-IOS-XR-fib-common-oper"
#    path = "mpls-forwarding/nodes/node/label-fib/forwarding/information"
    path = "mpls-forwarding/nodes/node[node-name='0/0/CPU0']/label-fib/forwarding/information"
    subscription_mode = "sample"
    sample_interval = "30"

[[processors.starlark]]
namepass = ["fib-common"]
source = '''
def apply(metric):
    unique_interfaces = set()

    for field_name, field_value in metric.fields.items():

        if "label_information/" in field_name and field_name.endswith("outgoing_interface"):
            if type(field_value) == "string":
                unique_interfaces.add(field_value)

    if unique_interfaces:
        metric.tags["unique_outgoing_interfaces"] = ",".join(list(unique_interfaces))

    return metric
'''

[[processors.converter]]
  [processors.converter.fields]
    tag = ["label_information/local_label"]

  [[inputs.gnmi.subscription]]
    name = "l2vpn"
    origin = "Cisco-IOS-XR-l2vpn-oper"
    path = "l2vpnv2/active/xconnects/xconnect"
    subscription_mode = "sample"
    sample_interval = "30"

  [[inputs.gnmi.subscription]]
    name = "te"
    origin = "Cisco-IOS-XR-infra-xtc-agent-oper"
    path = "xtc/policies/policy"
    subscription_mode = "sample"
    sample_interval = "30"

  [[inputs.gnmi.subscription]]
    name = "sr"
    origin = "Cisco-IOS-XR-perf-meas-oper"
    path = "performance-measurement/nodes/node/sr-policies/sr-policy-details/sr-policy-detail"
    subscription_mode = "sample"
    sample_interval = "30"

  [inputs.gnmi.tags]
    telegraf_tag =  "gnmi"
